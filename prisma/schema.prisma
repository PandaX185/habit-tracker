// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  username          String             @unique
  email             String             @unique
  fullname          String
  passwordHash      String?
  googleId          String?            @unique
  avatarUrl         String?
  xpPoints          Int                @default(0)
  level             Int                @default(0)
  habits            Habit[]
  friendships       Friendship[]       @relation("UserFriendships")
  friendOf          Friendship[]       @relation("FriendOf")
  habitParticipants HabitParticipant[]
  habitCompletions  HabitCompletion[]
  userBadges        UserBadge[]

  // Indexes for performance
  @@index([email])
  @@index([googleId])
  @@index([xpPoints]) // For leaderboards
  @@index([level]) // For filtering by level
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

model Friendship {
  id        String           @id @default(uuid())
  userId    String
  friendId  String
  status    FriendshipStatus @default(PENDING)
  user      User             @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend    User             @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())

  // Unique constraint to prevent duplicate friendships
  @@unique([userId, friendId])
  // Indexes for performance
  @@index([userId])
  @@index([friendId])
  @@index([status]) // For filtering by status
}

// RepetitionDays is a bitmask representing days of the week: 
// 0b0000001 = Saturday
// 0b0000010 = Sunday
// 0b0000100 = Monday
// 0b0001000 = Tuesday
// 0b0010000 = Wednesday
// 0b0100000 = Thursday
// 0b1000000 = Friday
// Combine bits for multiple days (e.g., 0b1111110 = every day except Saturday)
model Habit {
  id              String             @id @default(uuid())
  title           String
  description     String?
  repetitionDays  Int // Bitmask for days of the week
  userId          String // Owner of the habit
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  isCompetitive   Boolean            @default(false) // Whether this is a competitive habit
  maxParticipants Int? // Maximum number of participants (null = unlimited)
  // Streak tracking (only meaningful for personal habits)
  streak          Int                @default(0)
  longestStreak   Int                @default(0)
  lastCompletedAt DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  participants    HabitParticipant[]
  completions     HabitCompletion[]

  // Constraints for data integrity
  @@index([userId]) // Foreign key index
  @@index([userId, createdAt]) // Recent habits
  @@index([isCompetitive]) // Competitive vs personal habits
}

enum HabitParticipantStatus {
  PENDING // Invited but not accepted
  ACCEPTED // Accepted invitation
  DECLINED // Declined invitation
  REMOVED // Removed by owner
}

model HabitParticipant {
  id          String                 @id @default(uuid())
  habitId     String
  userId      String
  status      HabitParticipantStatus @default(PENDING)
  joinedAt    DateTime? // When they accepted
  invitedAt   DateTime               @default(now())
  habit       Habit                  @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions HabitCompletion[]

  // Unique constraint prevents duplicate participations
  @@unique([habitId, userId])
  // Indexes for performance
  @@index([habitId])
  @@index([userId])
  @@index([habitId, status]) // Participants by status per habit
  @@index([status]) // Global status filtering
}

model HabitCompletion {
  id            String            @id @default(uuid())
  habitId       String
  userId        String // Who completed it
  participantId String? // For competitive habits
  habit         Habit             @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  participant   HabitParticipant? @relation(fields: [participantId], references: [id], onDelete: Cascade)
  completedAt   DateTime          @default(now())
  notes         String?

  // Unique constraint prevents duplicate completions per day per user
  @@unique([habitId, userId, completedAt])
  // Indexes for performance
  @@index([habitId]) // Foreign key index
  @@index([userId]) // User completions
  @@index([participantId]) // Participant completions
  @@index([habitId, completedAt]) // Time-based queries per habit
  @@index([userId, completedAt]) // Time-based queries per user
  @@index([completedAt]) // Global completion queries
}

enum BadgeType {
  STREAK
  LEVEL
  HABIT_COUNT
  CATEGORY
  SOCIAL
  CONSISTENCY
  COMPETITIVE
}

enum BadgeRarity {
  COMMON // Easy to achieve
  RARE // Moderate difficulty
  EPIC // Hard to achieve
  LEGENDARY // Very hard to achieve
}

model Badge {
  id          String      @id @default(uuid())
  name        String      @unique
  description String
  icon        String? // Icon URL or emoji
  type        BadgeType
  rarity      BadgeRarity @default(COMMON)
  criteria    Json // Flexible criteria for earning the badge
  points      Int         @default(0) // XP bonus when earned
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  userBadges  UserBadge[]

  // Indexes for performance
  @@index([type])
  @@index([rarity])
  @@index([isActive])
}

model UserBadge {
  id       String   @id @default(uuid())
  userId   String
  badgeId  String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  earnedAt DateTime @default(now())
  progress Int      @default(0) // For progress tracking (0-100)

  // Unique constraint prevents duplicate badges per user
  @@unique([userId, badgeId])
  // Indexes for performance
  @@index([userId])
  @@index([badgeId])
  @@index([earnedAt])
}
