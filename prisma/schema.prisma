// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  username     String       @unique
  email        String       @unique
  fullname     String
  passwordHash String?
  googleId     String?      @unique
  avatarUrl    String?
  xpPoints     Int          @default(0)
  level        Int          @default(0)
  habits       Habit[]
  friendships  Friendship[] @relation("UserFriendships")
  friendOf     Friendship[] @relation("FriendOf")

  // Indexes for performance
  @@index([email])
  @@index([googleId])
  @@index([xpPoints]) // For leaderboards
  @@index([level]) // For filtering by level
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

model Friendship {
  id        String           @id @default(uuid())
  userId    String
  friendId  String
  status    FriendshipStatus @default(PENDING)
  user      User             @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend    User             @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())

  // Unique constraint to prevent duplicate friendships
  @@unique([userId, friendId])
  // Indexes for performance
  @@index([userId])
  @@index([friendId])
  @@index([status]) // For filtering by status
}

model Habit {
  id                 String            @id @default(uuid())
  title              String
  description        String?
  repetitionInterval Int               @default(1)
  repetitionUnit     String
  points             Int
  userId             String
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  difficulty         Int?
  isActive           Boolean           @default(true)
  streak             Int               @default(0)
  longestStreak      Int               @default(0)
  lastCompletedAt    DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  completions        HabitCompletion[]

  // Constraints for data integrity
  @@index([userId]) // Foreign key index
  @@index([userId, isActive]) // Active habits per user
  @@index([userId, createdAt]) // Recent habits
  @@index([lastCompletedAt]) // Recently completed habits
  @@index([streak]) // High streak habits
  @@index([repetitionUnit]) // Habits by frequency
}

model HabitCompletion {
  id          String   @id @default(uuid())
  habitId     String
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())
  notes       String?

  // Unique constraint prevents duplicate completions per day
  @@unique([habitId, completedAt])
  // Indexes for performance
  @@index([habitId]) // Foreign key index
  @@index([habitId, completedAt]) // Time-based queries per habit
  @@index([completedAt]) // Global completion queries
}
